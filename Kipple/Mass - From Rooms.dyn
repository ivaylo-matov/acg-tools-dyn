{
  "Uuid": "79ede179-7d29-492f-b6a7-42dcc1353413",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Masses - From Rooms",
  "ElementResolver": {
    "ResolutionMap": {
      "Revit.Category": {
        "Key": "Revit.Elements.Category",
        "Value": "RevitNodes.dll"
      },
      "Revit.Elements.Category": {
        "Key": "Revit.Elements.Category",
        "Value": "RevitNodes.dll"
      },
      "ElementQueries": {
        "Key": "Revit.Elements.InternalUtilities.ElementQueries",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Room.Area",
      "Id": "a901754cbc4b4355bce0349a13b4662d",
      "Inputs": [
        {
          "Id": "846ef115f889458d8de527bdf24a2025",
          "Name": "room",
          "Description": "Revit.Elements.Room",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "700a64fd9630417bb17cf826957b85a4",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get room area\n\nRoom.Area: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "area>minArea;",
      "Id": "b3b7e8deb5ed434fa3e14ed8f6eeb106",
      "Inputs": [
        {
          "Id": "3e44f41ad75c486dab02638fb9958369",
          "Name": "area",
          "Description": "area",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c378e4816b994b738a834980e11d803d",
          "Name": "minArea",
          "Description": "minArea",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "59d681fbbcb84141b3457f8fd1af3134",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "717bde2cc6774f56a396cd245da5927b",
      "Inputs": [
        {
          "Id": "d7491f5840454d959b7a738a3d3a7ac6",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "54df1602d84346ae8d9d62876efd3a56",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e4ec9029eb274e9a853a83e7f5b398c0",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "32ce46c169a2475a9e80061414e63907",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.DirectShape.ByGeometry@Autodesk.DesignScript.Geometry.Geometry,Revit.Elements.Category,Revit.Elements.Material,string",
      "Id": "c1d46f2e9b0b45978dec81fa4c53c9e5",
      "Inputs": [
        {
          "Id": "1066cecf1f154d6dafd27e33ed809469",
          "Name": "geometry",
          "Description": "A Solid or Surface that will be tessellated and placed in the Revit model as a DirectShape\n\nGeometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0fa909558b024607a3debf4ffd86ac91",
          "Name": "category",
          "Description": "Must be a top level Built-in Category\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cfb60dc2d5f7475dafe69f0dc8b13ecf",
          "Name": "material",
          "Description": "A Material to apply to the faces of the DirectShape\n\nMaterial\nDefault value : Revit.Elements.DirectShape.DynamoPreviewMaterial",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "622f7cb5bce946e79105f4c7795d1953",
          "Name": "name",
          "Description": "A string name for the DirectShape\n\nstring\nDefault value : \"DirectShape\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "15769739c60544e08c110e6e6d5e4b9d",
          "Name": "DirectShape",
          "Description": "A DirectShape Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit DirectShape given some geometry, a name for the shape, a Category, and Material. The geometry will be tessellated before being placed in the Revit model The category of a DirectShape cannot be changed after creation, so a new DirectShape will be generated if the category input is changed.\n\nDirectShape.ByGeometry (geometry: Geometry, category: Category, material: Material = Revit.Elements.DirectShape.DynamoPreviewMaterial, name: string = \"DirectShape\"): DirectShape"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "1145cea1d017411aa3f616d10017870a",
      "Inputs": [
        {
          "Id": "a236d7d31f334dc3be109227977d8390",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "daaae23067f04aff85ea8cdc692940f2",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "87ff9accc8a144258415f22b7f53ffb2",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "572fb78a12004facb075d13c9bf132ea",
      "Inputs": [
        {
          "Id": "7de0d10895824130b0743bceebb8f462",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "caccd520aa7f4616b4650045731f944f",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "61b68a70598c4fe28d48d89c39589498",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Number\";\n\"Name\";",
      "Id": "e46e9b0612a346e29299f0612ab7bded",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6006f393b4b041e399a6af6b48b8388e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f413d449ce18447cab3d11fee05b4706",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "prfix+number+\"_\"+name;",
      "Id": "426765c3421344ada78c75c69d1e9d16",
      "Inputs": [
        {
          "Id": "ce90ba86c6114d43933c0452f2a8d5b8",
          "Name": "prfix",
          "Description": "prfix",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a30bcda1f4fc4a78addc8a7f7819067d",
          "Name": "number",
          "Description": "number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "284ef7675997434f94286ac46ce2f022",
          "Name": "name",
          "Description": "name",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ea77b47a00cc4e0a9726a59f3e536ed5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "catM=Revit.Category.ByName(\"Mass\");",
      "Id": "6b3858ef8b274d8fa7fd01b7440d94d5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7cb61e4309fa4dbc98c2c2209895816a",
          "Name": "",
          "Description": "catM",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "119ea45ccd9245a481cad1be0a6f6d0a",
      "Inputs": [
        {
          "Id": "0ce82d1bf7f4481691de6bcdb523287c",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "39c86fbc961942c5b5b63c45d439e187",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1f44471521a24a2197f9aaf9cffe9ae7",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "125975058bd5400e9f1ffa70577a9595",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "WombatDynamo.Workset.ByName@string",
      "Id": "7fb174cdddf7404ba43f6d88d73f0963",
      "Inputs": [
        {
          "Id": "79a8b3ad056149a28270256f528e4de5",
          "Name": "name",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a0c4685a571a46678d79aa89403151f9",
          "Name": "Workset",
          "Description": "Workset",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns workset name from workset ID.\n\nWorkset.ByName (name: string): Workset"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "worset=e.Id;\n\"Workset\";\n\"Comments\";\n\"Mark\";\n\"Phase Created\";",
      "Id": "a5161d04b0c24cbdb3e2a3dc3aa8d2b8",
      "Inputs": [
        {
          "Id": "6516e09e3f6e4108844a15b6502d4cde",
          "Name": "e",
          "Description": "e",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3e7b7f44b9da4dac9a137dde8dc14016",
          "Name": "",
          "Description": "worset",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f3dcb7fe32fc4d23823df3f317ef6613",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ceb29ee8df014270ae8a41a88674d191",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "919aadd69aba48a3accf72591b99ecdf",
          "Name": "",
          "Description": "Value of expression at line 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "32e2d32944c2477996d6496044fc80da",
          "Name": "",
          "Description": "Value of expression at line 5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "catR=Revit.Category.ByName(\"Rooms\");\nallR=ElementQueries.OfCategory(catR);\n\"ACG-4510-RoomMass_\";",
      "Id": "859496199ebd47779fe254d72c0c755f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4b44d57880b84ba692a170496f4809d6",
          "Name": "",
          "Description": "catR",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a3a81156ae9b42ac87cceeca120bfdf1",
          "Name": "",
          "Description": "allR",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ff9b0ebbcd34b07a214df3ddf08abd6",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "catM=Revit.Category.ByName(\"Mass\");\nallM=ElementQueries.OfCategory(catM);",
      "Id": "41b69aa63ab348c38901cf590705684a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c1c2a67f8ee949589208226b08234bf1",
          "Name": "",
          "Description": "catM",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ae3333f73af9444b957246e14493cf83",
          "Name": "",
          "Description": "allM",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "e.Name;",
      "Id": "80aff6199a454506bd7f55c29abe7620",
      "Inputs": [
        {
          "Id": "967eb261637c40dea1e6879b0acabf71",
          "Name": "e",
          "Description": "e",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b21c211686d84d15b1ef33af4ccaf147",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.StartsWith@string,string,bool",
      "Id": "1008b52db18848c3bbeb5aad660c268d",
      "Inputs": [
        {
          "Id": "35325ceefd69437bb342db5c6526a230",
          "Name": "string",
          "Description": "String to search the start of\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a87c64bfe0a44c63b647f00ae8fe9c80",
          "Name": "searchFor",
          "Description": "Substring to search the start for.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3b7b68dffa174843b3e91c82df932cf8",
          "Name": "ignoreCase",
          "Description": "True to ignore case in comparison, false to take case into account\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7e782be57c0642ad86d133cccafaaa79",
          "Name": "bool",
          "Description": "True if string starts with substring, false if it doesn’t",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determines if the given string starts with the given substring.\n\nString.StartsWith (string: string, searchFor: string, ignoreCase: bool = false): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "ba07df2c5eda4dbbbcdd4a3be909ce31",
      "Inputs": [
        {
          "Id": "657b4daeadf14cbd9f08b1a75e415ca2",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "862086cc275f4005b9dcb0c29a124476",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5945a2fd401148f581b158594ceb0514",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "63ab394096d34eadae75217709556ec2",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "c6a03840019641ff83d847d7899fbc1e",
      "Inputs": [
        {
          "Id": "f999d11203d24e7c833f0f709b59454d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eaa2c2c08d5445deacb093cf0b4a26d4",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b8cd43477a614df7acc9536f3946ad6c",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cfae70304e124b83b6ab12064caf85dd",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Elements.Elements.Delete@Revit.Elements.Element",
      "Id": "e549f15a305b4c6690ae78e9b73eaa80",
      "Inputs": [
        {
          "Id": "d17a20e3c197405f8656ce5a0c776e93",
          "Name": "element",
          "Description": "Element to delete.\n\nElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fde94e84042e4ed98093805d9677752a",
          "Name": "bool",
          "Description": "bool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Delete element from Revit DB.\n\nElements.Delete (element: Element): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Orchid.Common.DataStream.Await@var[]..[],var[]..[]",
      "Id": "d17232fbc3b440e38de9303c4e25e7d7",
      "Inputs": [
        {
          "Id": "0298a2dbf5a642678ddacfa2c7b14361",
          "Name": "pass",
          "Description": "Data to pass.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c01b45b50b0b4f10bf169556f02deaf6",
          "Name": "waitFor",
          "Description": "Data object to wait for.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7271ced4dda6482982295b243e6c2456",
          "Name": "pass",
          "Description": "Passed data.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Await a data stream before passing another data stream.\n\nDataStream.Await (pass: var[]..[], waitFor: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "f0c0527a4d4e4f87b32ae7e10305c01b",
      "Inputs": [
        {
          "Id": "80dacfeb87ab49848e4b655ec2b6bdd6",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fc70b631b4c7400a8f6dc3ee41471385",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "03952f045f734ad3a91a8d1c1ff24bc6",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "80db3e1d6929452b87382c98cb6e3673",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "4494d9c58a02409fa5a2476c9756275f",
      "Inputs": [
        {
          "Id": "ecb2e083745c47c2a8476e10c9a893c9",
          "Name": "obj",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "14ce133d34554b7bad2445e4016b2a6d",
          "Name": "str",
          "Description": "Result of math computation",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "012bfc4e60214953bf58d2dfee9fe199",
      "Inputs": [
        {
          "Id": "3d51cfbe02274a52940b87a1d4849eae",
          "Name": "string",
          "Description": "String to split up\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3098fa5945184f8499b370a095acfc35",
          "Name": "separator0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6c47f6f5dd7841449d779eaed6f7233c",
          "Name": "strings",
          "Description": "List of strings made from the input string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator strings.\n\nString.Split (string: string, separators: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\".\";",
      "Id": "d562d6764910470eb3460c7dcb09e339",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "90b2f8542e2f4c7483cbfc9b066f6308",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "e307e06b6fd3494a82113e96b0f30881",
      "Inputs": [
        {
          "Id": "338585f9dad24835887823ee273fa2f3",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "47f1d76809ce4b849d6f51a6d001f184",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "minArea=x[0];\nworsetName=x[1];\nphaseName=x[2];",
      "Id": "08db960b829940ccb36aaaa2a48b4ec7",
      "Inputs": [
        {
          "Id": "2ebf785c092f427caa6ceadf7393cfd6",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ed452e79fc9b44d590a8bbcee32a5c64",
          "Name": "",
          "Description": "minArea",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4c4a8f8821674b3f9613028ebe8b8efb",
          "Name": "",
          "Description": "worsetName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0b59e4f253cb414d8d6d8f936e228772",
          "Name": "",
          "Description": "phaseName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "R:\\3600_IT\\3605_BIM\\3605_17_Dynamo\\01-Scripts\\_Dyno Scripts\\ACG_logo.png",
      "InputValue": "..\\ACG_logo.png",
      "NodeType": "ExtensionNode",
      "Id": "2b1086873da240b7b0df98e299b49117",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dfb6d4562b2546ea89123b5a3745c3d2",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its file path."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.FileObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e81fb40c7a57449da0525da3e317d090",
      "Inputs": [
        {
          "Id": "be5b388c283446e89e001c63d17509ec",
          "Name": "path",
          "Description": "Path to the file.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "92a49b955c7f496685ac89e5ccf24229",
          "Name": "file",
          "Description": "File object",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a file object from a path."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "21f76aa4-5026-47ec-b977-474280c81d74",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "d36ee9b6d77948c982139e648ebcee53",
      "Inputs": [
        {
          "Id": "974158082cc94757ab8a36dc4909706f",
          "Name": "Title",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd7c9e1b3eeb43c89326942d23993941",
          "Name": "TextNote_",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b3eec41007ee40fb89a9c48ee6198f22",
          "Name": "TextBox input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create Data for TextNote input in UI.MultipleInputForm ++ . Check out www.data-shapes.net for more informations"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.IO.Image.ReadFromFile@var",
      "Id": "b8194747561449d186a468bc7e612ae6",
      "Inputs": [
        {
          "Id": "35f38359a8f94723aed32aea15054a85",
          "Name": "file",
          "Description": "File object to load image from\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0b7b26a108b94872940f13f5c63627c3",
          "Name": "image",
          "Description": "Image object from file",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Loads the file as a bitmap.\n\nImage.ReadFromFile (file: var): var"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Generate\";\n\"Cancel\";\n600;\n350;\ntrue;",
      "Id": "bfc65a700fa649c4b68335e0f6469ad7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2ab06181092a49e990206937be01d330",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f3cdec5e28ba44b084be9bc4d8cc3807",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "24b4c85ff5a8455a82d44015fcb2ea12",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6a9148da60644614ac0c260ab0c11919",
          "Name": "",
          "Description": "Value of expression at line 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "917e6c6a8c8b46bb9cb98ec6a5f070ad",
          "Name": "",
          "Description": "Value of expression at line 5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "9fbd05c0-ec1f-4bd3-bf37-969a1552eab8",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "cad2c4d43fad4bc8a22a820455ef7e18",
      "Inputs": [
        {
          "Id": "ddf7b3d15ab74b788d99ce064529851d",
          "Name": "Description_optional",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3ca13821cdb44bafa90e2d8a52ddf2f6",
          "Name": "Logo_optional",
          "Description": "var\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9a21d1c7d54f4bea999c9d1348015956",
          "Name": "ButtonText_optional",
          "Description": "string\nDefault value : \"Set Values\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9ff00cbc7d474a4883795b72b0a6c9af",
          "Name": "Inputs",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f3e5c72c639c402d88f13a7bc18fb87c",
          "Name": "Toggle",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9a440b74f6d646d492cdd58a53a175ad",
          "Name": "LinkToHelp_optional",
          "Description": "string\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00d09ccc976d432885616ed6225ff22c",
          "Name": "CancelButtonText_optional",
          "Description": " Cancel button will only be displayed if a label text is entered here\n\nstring\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b467d0784ccc4c5d9bbc034ff45a6508",
          "Name": "MaxHeight_optional",
          "Description": "int\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a90c465696a94720be61044dc6e02f26",
          "Name": "Width_optional",
          "Description": "int\nDefault value : 400",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d3a92a0b5cca48b683fadd5615b1852b",
          "Name": "LabelWidth_optional",
          "Description": "int\nDefault value : 120",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d74a5faba6a442cdb7f3b460d55d5648",
          "Name": "User Inputs",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b92899866d6447b3a8ae3fb4883d42cd",
          "Name": "Was Run ",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "91cd9f99adc540b08b9122feb779b56a",
          "Name": "Was Cancelled",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a form with multiple inputs. \r\nsee www.data-shapes.net for tutorials and infos!"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Note:\";",
      "Id": "30ef80830bfd44949e8340b6310b60fc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6ece0d938a70490dac7d29dbff77011d",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "ccb3428b03934844a2573b676784f8fe",
      "Inputs": [
        {
          "Id": "904b40ec23e94788b2013ceacd854e3f",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e7746bbc39c44410882b36a18ce40770",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3cf785e93c2f405ca3206b2aed65e2ce",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ed568723ae8a40aa91e25e93e172d595",
          "Name": "item3",
          "Description": "Item Index #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cd6c1be5651443149e00609f08128d61",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "This tool will generate mass elements from rooms in the model. Users are able to specify minimal area for the rooms that will be used. Any room with area less than what is specified will be ignored.\r\nAll masses will be placed in A-Coordination workset. Please make sure this workset is created in the model before running the script. Number and name of each room will be transferred as Mark parameter value in the respective mass. ID of each room element will be transferred as Comments value. The script will delete previous masses each time it's run.\r\nFor more information please refer to the Revit Tutorials channel in MS Stream.\r\n",
      "Id": "bcec0210626f434e9f275bfdae015efe",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a030050a4e7a4931b8bbf5c1b1af8fbb",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Minimal room area (m2)\";\n\"1\";\ntrue;",
      "Id": "8153593260f2402f8abe0dc8dc5dbe54",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d144b5b67df14877b989946be0b0c884",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3b825661994249f1ba2c6d0e20cd17b0",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a4ac09a437ad426f90216b5f3cacdfd5",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "aef287f9-369d-4d31-92af-a18f6962a3d3",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "05a41f1203f14499ae02c03d0b0f2ada",
      "Inputs": [
        {
          "Id": "8c1c1c24012f4c6795269a6882ae2a1f",
          "Name": "scriptName",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d1aec4dc49754b6ea6c845fd0d0d99e2",
          "Name": "OUT",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an entry to Excel document every time a script is run. The document is located in S:\\Dynamo\\05-UsageStats"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Mass - From Rooms\";",
      "Id": "e626be89d2944716a2dd4b3226017f26",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b92bc9d1c26c4d47b1a654d2ee33407a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "928e40a7-91ac-45c3-8d59-4d899fc49b83",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "5d8d4e4d7fdd4bab8d220b859054c16d",
      "Inputs": [
        {
          "Id": "59ae9d565417430cb80c77658cc613a4",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a4a7b9bb55c449f6980ec94a42da9550",
          "Name": "DefaultText",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "99ee2c6d4da34a1a9f4c4c1d2037e6d5",
          "Name": "IsNumberEntry",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db9ccd25432245908c230868ed9b36c5",
          "Name": "TextBox input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create Data for TextBox input in UI.MultipleInputForm ++ . Check out www.data-shapes.net for more informations"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "82a4a901c6d64e839189508634e10b2f",
      "Inputs": [
        {
          "Id": "276afe14291c419cb8a73b6f0a13c05e",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9a29394154144fac8f1fca610043c79f",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "WombatDynamo.Workset.SelectAll",
      "Id": "a811cbc79b274ddd9e70a28f1b6e718c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f071b3d416054e358433021ee466eca1",
          "Name": "Workset[]",
          "Description": "Workset[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns all user-defined worksets in the document.\n\nWorkset.SelectAll ( ): Workset[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"A-Coordination\";\n\"Select Workset.\";\ne.Name;",
      "Id": "26130c699a70444c9bd3f4608071551f",
      "Inputs": [
        {
          "Id": "daff8265732542c7bd5541f179e24ef3",
          "Name": "e",
          "Description": "e",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c31a16d67b6147d7a7c5c629a2ece6fc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a7458489d0564badaba55f61f00d9dc3",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "60052c7d26de474987f5c28326a29534",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.IndexOf@var[]..[],var",
      "Id": "f010e9ccb21049eb852b05e446c5faa1",
      "Inputs": [
        {
          "Id": "8e394f2fcdb74e0dadba6c012b1049b2",
          "Name": "list",
          "Description": "The list to find the element in.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "62e04c8c74b94b93b716a8b5e55cc268",
          "Name": "element",
          "Description": "The element whose index is to be returned.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "48682888dd2a4ec68c77875f53167d68",
          "Name": "int",
          "Description": "The index of the element in the list. Invalid index -1 will be returned if strict match not found.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the index of the element in the given list. Match between given list and target element must be a strict match (i.e. int to int, double to double, string to string, object to object etc.)\n\nList.IndexOf (list: var[]..[], element: var): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "b409775c-5d88-4d47-96a3-5135c775d26a",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "c3b61735be3a48f09f3c8ffd64d32c2a",
      "Inputs": [
        {
          "Id": "8f38fdfcb2fd4ae3ac5029bd1d592753",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9aefcb441a5c44fab3ebaaf82f8ad40e",
          "Name": "Keys_",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2ad63bd12fa045ce9dccab0a87d582c7",
          "Name": "Values_",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b6fb83f839614ce78fd34a744032863c",
          "Name": "DefaultValueIndex",
          "Description": "int\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "468683a998a145058525a21e22d09fff",
          "Name": "Sorted_optional",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d635ab72bab144ee9f5303057593535e",
          "Name": "DropDown input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create data for DropDown input in UI.MultiInputForm ++ . Check out www.data-shapes.net for more infos."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Room.CoreBoundary",
      "Id": "5579e3f5737143c483c8ceb74a859da8",
      "Inputs": [
        {
          "Id": "0275d1b6eb284241ae019c0cb3788e8e",
          "Name": "room",
          "Description": "Revit.Elements.Room",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9642f8f034ed4edf9c2dc9d0df0a037e",
          "Name": "Curve[][]",
          "Description": "Curve[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Core boundary\n\nRoom.CoreBoundary: Curve[][]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "4d8d5492e83544c8a5d9fa8eb232e25f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1fb9affd9d8d4ed2831592b5f0122564",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.ExtrudeAsSolid@double",
      "Id": "e8a19cf79db14624ba33244e92e494fc",
      "Inputs": [
        {
          "Id": "2e155a3748f84fcab5aa5dd8f0f943f8",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "258aada022ad43619c884c9c2d64311f",
          "Name": "distance",
          "Description": "Distance to extrude\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6637f9c14070404ca925ecbe9aefd415",
          "Name": "Solid",
          "Description": "The extruded Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Extrudes a Curve in the Normal direction by the specified distance. Curve must be closed.\n\nCurve.ExtrudeAsSolid (distance: double = 1): Solid"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "cd558240966347ca93ab97fa04a200a2",
      "Inputs": [
        {
          "Id": "07a855c85b6e41cfbc407d7b6eab6b14",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c0b269139e2348ff9b379d559bdb4029",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6c81456e7d314ed294c35c9f2712adc0",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Limit Offset\";",
      "Id": "cd5029ad654648ca8076d6fc7456924a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "75f914fa096247f996a3dded13f2aead",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "78b7edda321746ee92a64f010c03ad0d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3006e7caac5d482da4d803e7de14e4c7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "7a96d721174b4e8ea648ff088b2e946d",
      "Inputs": [
        {
          "Id": "bb32bd2aaf274af5b24260db55cad604",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 3,
          "UseLevels": true,
          "KeepListStructure": true
        },
        {
          "Id": "f768d46af646406eb9f8b4cc77c96806",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "743c495203c443f891276ead5f608d04",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByJoinedCurves@Autodesk.DesignScript.Geometry.Curve[],double",
      "Id": "fa2a8d747a264acebd6ac9075743ac5c",
      "Inputs": [
        {
          "Id": "9f95511ed06e4aff92884e0b82904375",
          "Name": "curves",
          "Description": "Curves to join into polycurve\n\nCurve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "766e41171bdf4235a27fa348b9cca881",
          "Name": "joinTolerance",
          "Description": "Tolerance to determine size of gap allowed between curves to be joined\n\ndouble\nDefault value : 0.001",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ad7cfbf984af4df4bc622432cb1d5517",
          "Name": "PolyCurve",
          "Description": "Polycurve created by joined curves",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make PolyCurve by joining curves. Flips curve as needed for connectivity. Choose a preferred join tolerance between 1e-6 and 1e-3 units.\n\nPolyCurve.ByJoinedCurves (curves: Curve[], joinTolerance: double = 0.001): PolyCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.Types.FindTypeByNameInAssembly(\"Phase\",\"RevitAPI\");",
      "Id": "6827fcba29ee4dbda300067e41fe8045",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "90b73253c97b4297ba030890d102d2a9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "348505e691494ef988a9f4173262a9ea",
      "Inputs": [
        {
          "Id": "6f36f4c22ef94e518f0d0ea7643c5552",
          "Name": "element type",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b728660353584394bc5d4d17a6a72222",
          "Name": "elements",
          "Description": "All elements in the active document of a given type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All elements in the active document of a given type."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Select rooms' Phase.\";\nph.Name;",
      "Id": "e81ef56de38749b687e089d31278e703",
      "Inputs": [
        {
          "Id": "c9e8ca09b8604c96ac69e05d7b43d73a",
          "Name": "ph",
          "Description": "ph",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6ed7c6b91bc9401ca1251b3407fdec7e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84ff4bd46b874ad8a0a181300aed8438",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "b409775c-5d88-4d47-96a3-5135c775d26a",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "d89757d46e214fc8bc5936265806d382",
      "Inputs": [
        {
          "Id": "cebcdb86329041c79e18fcf9f88be56c",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c673ab9e5ff9476eb15e54e7238db066",
          "Name": "Keys_",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f815593e16cc4cb99ff2faf154c3df04",
          "Name": "Values_",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "912708a1155d48589bfbb378e274d365",
          "Name": "DefaultValueIndex",
          "Description": "int\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4efd832903994e8b9d06a03216a08aba",
          "Name": "Sorted_optional",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "65ea425bf32e47f1859df3c1043d8690",
          "Name": "DropDown input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create data for DropDown input in UI.MultiInputForm ++ . Check out www.data-shapes.net for more infos."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "00d010aa25654ca1b51ece58017ac28c",
      "Inputs": [
        {
          "Id": "50a8acf50fde4e728d9b8f9c17ef4032",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "67cabadd6187442c97b0c4914db27503",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d05729888f5742c4b054ab9881a29537",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Phase\";",
      "Id": "2e4a6684375c41a8999d2d18d349b49d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "02ac78e0ba3d4e599d386065ed219b01",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "ph.Name==input;",
      "Id": "3bbeeb7497944478812fad7e26a4372a",
      "Inputs": [
        {
          "Id": "4de4c72d0e674b739d564706464e97ee",
          "Name": "ph",
          "Description": "ph",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "89665719660743a296636f04e22b179d",
          "Name": "input",
          "Description": "input",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c652ab8935854147850af9f24ad561bc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "8b9b2244cd9e4a5296b1ee3403006bed",
      "Inputs": [
        {
          "Id": "909ad4917b7e4af589a9c064b3dc5b07",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c2dae91fa2274780835cff5450ddfed7",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bb619f5a634e4fe18fa49f62ec4c3e89",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "415d9b631a1648df900573d3c745dd2f",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "bbce14bd26f942cc873f54597ef9f9cd",
      "Inputs": [
        {
          "Id": "f139634ded3343479c7f0067375bf3fb",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a4276baa10414d0796ac02b8a693398f",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "500caf9010e1448699dd68cd567e4cbf",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d7e683a0b8a74e62a9082713d191b243",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Orchid.RevitProject.Elements.Element.PhaseByName@string",
      "Id": "2def9dbdb82947549a0a6d3734e09b42",
      "Inputs": [
        {
          "Id": "761d6fb279b744439c51f833aafdf25b",
          "Name": "name",
          "Description": "Phase name as string.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "608960b76e0b4b8ba54c3de36ae23bbe",
          "Name": "Phase",
          "Description": "Phase as Dynamo type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get phase by name.\n\nElement.PhaseByName (name: string): Element"
    }
  ],
  "Connectors": [
    {
      "Start": "700a64fd9630417bb17cf826957b85a4",
      "End": "3e44f41ad75c486dab02638fb9958369",
      "Id": "90e027a755ff49c7835b2ee1172fbee9"
    },
    {
      "Start": "59d681fbbcb84141b3457f8fd1af3134",
      "End": "54df1602d84346ae8d9d62876efd3a56",
      "Id": "0e8ba6fc93054af99cebbc513cfe13ed"
    },
    {
      "Start": "e4ec9029eb274e9a853a83e7f5b398c0",
      "End": "50a8acf50fde4e728d9b8f9c17ef4032",
      "Id": "d276d0e3b0a848a7a25c97bdb0e6a062"
    },
    {
      "Start": "e4ec9029eb274e9a853a83e7f5b398c0",
      "End": "909ad4917b7e4af589a9c064b3dc5b07",
      "Id": "ab2c3c3c3eeb4e2093b967c2bbbc88c5"
    },
    {
      "Start": "15769739c60544e08c110e6e6d5e4b9d",
      "End": "0ce82d1bf7f4481691de6bcdb523287c",
      "Id": "5f31071c280345cb97497d56e1318d7a"
    },
    {
      "Start": "15769739c60544e08c110e6e6d5e4b9d",
      "End": "f999d11203d24e7c833f0f709b59454d",
      "Id": "0671c2cdf17a489f83af841bac33c76b"
    },
    {
      "Start": "15769739c60544e08c110e6e6d5e4b9d",
      "End": "80dacfeb87ab49848e4b655ec2b6bdd6",
      "Id": "94bddbc42e8844a2b47161bdc266d326"
    },
    {
      "Start": "15769739c60544e08c110e6e6d5e4b9d",
      "End": "f139634ded3343479c7f0067375bf3fb",
      "Id": "43e08a1109154394b7ceac3b54e28c52"
    },
    {
      "Start": "87ff9accc8a144258415f22b7f53ffb2",
      "End": "a30bcda1f4fc4a78addc8a7f7819067d",
      "Id": "c1a0a1bb3b7541f5a74d5af3b13471fb"
    },
    {
      "Start": "61b68a70598c4fe28d48d89c39589498",
      "End": "284ef7675997434f94286ac46ce2f022",
      "Id": "bf54a6b94df8479ab8ff52de0f9bbfd0"
    },
    {
      "Start": "6006f393b4b041e399a6af6b48b8388e",
      "End": "daaae23067f04aff85ea8cdc692940f2",
      "Id": "248bbe97f72740eeb05c55efdc868a3e"
    },
    {
      "Start": "f413d449ce18447cab3d11fee05b4706",
      "End": "caccd520aa7f4616b4650045731f944f",
      "Id": "3d9441cddf0e4b74bb8b6b0a669fe62b"
    },
    {
      "Start": "ea77b47a00cc4e0a9726a59f3e536ed5",
      "End": "622f7cb5bce946e79105f4c7795d1953",
      "Id": "5587589b70684d0dad8048c16e831c1d"
    },
    {
      "Start": "ea77b47a00cc4e0a9726a59f3e536ed5",
      "End": "03952f045f734ad3a91a8d1c1ff24bc6",
      "Id": "cd92021542f24f32861069501b7c1983"
    },
    {
      "Start": "7cb61e4309fa4dbc98c2c2209895816a",
      "End": "0fa909558b024607a3debf4ffd86ac91",
      "Id": "ed82644cfea64460b21560abb61c7070"
    },
    {
      "Start": "a0c4685a571a46678d79aa89403151f9",
      "End": "6516e09e3f6e4108844a15b6502d4cde",
      "Id": "8d798e99cbb14edc84bb3cd84bcb81c0"
    },
    {
      "Start": "3e7b7f44b9da4dac9a137dde8dc14016",
      "End": "1f44471521a24a2197f9aaf9cffe9ae7",
      "Id": "e25adf802d29403b9ac23585c24c8d85"
    },
    {
      "Start": "f3dcb7fe32fc4d23823df3f317ef6613",
      "End": "39c86fbc961942c5b5b63c45d439e187",
      "Id": "80ab7abfc3304492a733cc04531901a1"
    },
    {
      "Start": "ceb29ee8df014270ae8a41a88674d191",
      "End": "eaa2c2c08d5445deacb093cf0b4a26d4",
      "Id": "3618f85bc1c44326b8392b60a4f1e199"
    },
    {
      "Start": "919aadd69aba48a3accf72591b99ecdf",
      "End": "fc70b631b4c7400a8f6dc3ee41471385",
      "Id": "c6b2ba0ea411496ebba3170998d1988d"
    },
    {
      "Start": "32e2d32944c2477996d6496044fc80da",
      "End": "a4276baa10414d0796ac02b8a693398f",
      "Id": "5b678c3167714fa98731cebf3d78271b"
    },
    {
      "Start": "a3a81156ae9b42ac87cceeca120bfdf1",
      "End": "0298a2dbf5a642678ddacfa2c7b14361",
      "Id": "ade390381d3d4b7d881868ad4529f0d8"
    },
    {
      "Start": "1ff9b0ebbcd34b07a214df3ddf08abd6",
      "End": "ce90ba86c6114d43933c0452f2a8d5b8",
      "Id": "6b2b48cdceda4cdb92789fbdeb486756"
    },
    {
      "Start": "1ff9b0ebbcd34b07a214df3ddf08abd6",
      "End": "a87c64bfe0a44c63b647f00ae8fe9c80",
      "Id": "da666cd060374604937785bcb0a442b8"
    },
    {
      "Start": "ae3333f73af9444b957246e14493cf83",
      "End": "967eb261637c40dea1e6879b0acabf71",
      "Id": "50ebe6d74346497ea65e71b2413c851a"
    },
    {
      "Start": "ae3333f73af9444b957246e14493cf83",
      "End": "657b4daeadf14cbd9f08b1a75e415ca2",
      "Id": "e7b504b1e16248df992f67ae0de7b1be"
    },
    {
      "Start": "b21c211686d84d15b1ef33af4ccaf147",
      "End": "35325ceefd69437bb342db5c6526a230",
      "Id": "bc2dcaedb8a34ca390c2c06fec0e3cb0"
    },
    {
      "Start": "7e782be57c0642ad86d133cccafaaa79",
      "End": "862086cc275f4005b9dcb0c29a124476",
      "Id": "7e5257963dbe438db429f8280680d906"
    },
    {
      "Start": "5945a2fd401148f581b158594ceb0514",
      "End": "d17a20e3c197405f8656ce5a0c776e93",
      "Id": "68c1f09d3c7040aca182ae9341cc4cd1"
    },
    {
      "Start": "fde94e84042e4ed98093805d9677752a",
      "End": "c01b45b50b0b4f10bf169556f02deaf6",
      "Id": "d6ef9a03ee42485c80f396a84621eba5"
    },
    {
      "Start": "7271ced4dda6482982295b243e6c2456",
      "End": "846ef115f889458d8de527bdf24a2025",
      "Id": "b2fdc3ad5add40fd9ec15ceb8a9ad8a1"
    },
    {
      "Start": "7271ced4dda6482982295b243e6c2456",
      "End": "d7491f5840454d959b7a738a3d3a7ac6",
      "Id": "c922f3459b434a2fb94c68b3399bb86c"
    },
    {
      "Start": "14ce133d34554b7bad2445e4016b2a6d",
      "End": "3d51cfbe02274a52940b87a1d4849eae",
      "Id": "185e7c231f5c4ca88a3e711681da1dd1"
    },
    {
      "Start": "6c47f6f5dd7841449d779eaed6f7233c",
      "End": "338585f9dad24835887823ee273fa2f3",
      "Id": "fa7ff72cd0bf41c3944014c492f73ae7"
    },
    {
      "Start": "90b2f8542e2f4c7483cbfc9b066f6308",
      "End": "3098fa5945184f8499b370a095acfc35",
      "Id": "83b12f20e67a44339ccb144db476d066"
    },
    {
      "Start": "47f1d76809ce4b849d6f51a6d001f184",
      "End": "b8cd43477a614df7acc9536f3946ad6c",
      "Id": "ea5377c700e84fefbb2e7ffbf90f2827"
    },
    {
      "Start": "ed452e79fc9b44d590a8bbcee32a5c64",
      "End": "c378e4816b994b738a834980e11d803d",
      "Id": "897326191be54a41a806c6644fa6e0bd"
    },
    {
      "Start": "4c4a8f8821674b3f9613028ebe8b8efb",
      "End": "79a8b3ad056149a28270256f528e4de5",
      "Id": "879fe71422e249dfb1f90eeed7347d77"
    },
    {
      "Start": "0b59e4f253cb414d8d6d8f936e228772",
      "End": "89665719660743a296636f04e22b179d",
      "Id": "813b7d676e9441c289f7fc753f12b5a3"
    },
    {
      "Start": "0b59e4f253cb414d8d6d8f936e228772",
      "End": "761d6fb279b744439c51f833aafdf25b",
      "Id": "8debce80ae7f451e865ba51569400abc"
    },
    {
      "Start": "dfb6d4562b2546ea89123b5a3745c3d2",
      "End": "be5b388c283446e89e001c63d17509ec",
      "Id": "7ed60b476a8c4c2b852265f3faf6fc1a"
    },
    {
      "Start": "92a49b955c7f496685ac89e5ccf24229",
      "End": "35f38359a8f94723aed32aea15054a85",
      "Id": "0ab3a38b8f624979a4a135e71d9c673a"
    },
    {
      "Start": "b3eec41007ee40fb89a9c48ee6198f22",
      "End": "904b40ec23e94788b2013ceacd854e3f",
      "Id": "d637f6bfc9354b2dbd6b3b7ba41577b5"
    },
    {
      "Start": "0b7b26a108b94872940f13f5c63627c3",
      "End": "3ca13821cdb44bafa90e2d8a52ddf2f6",
      "Id": "53eef65aa9f642fca8058b5cf75068a6"
    },
    {
      "Start": "2ab06181092a49e990206937be01d330",
      "End": "9a21d1c7d54f4bea999c9d1348015956",
      "Id": "30eab7fc69b549e79bb0fcd0e6983b5f"
    },
    {
      "Start": "f3cdec5e28ba44b084be9bc4d8cc3807",
      "End": "00d09ccc976d432885616ed6225ff22c",
      "Id": "208eee55f49b4dcd802f4ee9ad65ba7c"
    },
    {
      "Start": "24b4c85ff5a8455a82d44015fcb2ea12",
      "End": "a90c465696a94720be61044dc6e02f26",
      "Id": "afddb82013fa4a599a90b836037f9a38"
    },
    {
      "Start": "6a9148da60644614ac0c260ab0c11919",
      "End": "d3a92a0b5cca48b683fadd5615b1852b",
      "Id": "9f2a49938d2d4c6cb3ee06abfca0ea94"
    },
    {
      "Start": "917e6c6a8c8b46bb9cb98ec6a5f070ad",
      "End": "f3e5c72c639c402d88f13a7bc18fb87c",
      "Id": "6b12d903724344d6b75c3337fbbbe1c7"
    },
    {
      "Start": "d74a5faba6a442cdb7f3b460d55d5648",
      "End": "276afe14291c419cb8a73b6f0a13c05e",
      "Id": "26529b68ff1f40be8d4e949f2adc4e6d"
    },
    {
      "Start": "d74a5faba6a442cdb7f3b460d55d5648",
      "End": "2ebf785c092f427caa6ceadf7393cfd6",
      "Id": "4a1155df019347adb62c684077f56287"
    },
    {
      "Start": "6ece0d938a70490dac7d29dbff77011d",
      "End": "974158082cc94757ab8a36dc4909706f",
      "Id": "6148cf12f1314ec594fc6e2b4c5d0285"
    },
    {
      "Start": "cd6c1be5651443149e00609f08128d61",
      "End": "9ff00cbc7d474a4883795b72b0a6c9af",
      "Id": "640cc4d5857c496fbd5107f3fa190adb"
    },
    {
      "Start": "a030050a4e7a4931b8bbf5c1b1af8fbb",
      "End": "dd7c9e1b3eeb43c89326942d23993941",
      "Id": "475ebdef68784a66aa4522f6d034c823"
    },
    {
      "Start": "d144b5b67df14877b989946be0b0c884",
      "End": "59ae9d565417430cb80c77658cc613a4",
      "Id": "66a294009f304b3f9d75df4059763026"
    },
    {
      "Start": "3b825661994249f1ba2c6d0e20cd17b0",
      "End": "a4a7b9bb55c449f6980ec94a42da9550",
      "Id": "1e88303ea572432797d093714249b96f"
    },
    {
      "Start": "a4ac09a437ad426f90216b5f3cacdfd5",
      "End": "99ee2c6d4da34a1a9f4c4c1d2037e6d5",
      "Id": "0c29b64c5fe94d9a8b9756b09734d384"
    },
    {
      "Start": "b92bc9d1c26c4d47b1a654d2ee33407a",
      "End": "8c1c1c24012f4c6795269a6882ae2a1f",
      "Id": "66a30a291100415c855c8d3808cf6be3"
    },
    {
      "Start": "db9ccd25432245908c230868ed9b36c5",
      "End": "e7746bbc39c44410882b36a18ce40770",
      "Id": "2339d2f9651349509e12b86d0ce3e87f"
    },
    {
      "Start": "f071b3d416054e358433021ee466eca1",
      "End": "daff8265732542c7bd5541f179e24ef3",
      "Id": "95a35a4beac54aa9a1ff637b3c9a5cd9"
    },
    {
      "Start": "c31a16d67b6147d7a7c5c629a2ece6fc",
      "End": "62e04c8c74b94b93b716a8b5e55cc268",
      "Id": "7cb5e1b2ff25426a97cd41361c4062d9"
    },
    {
      "Start": "a7458489d0564badaba55f61f00d9dc3",
      "End": "8f38fdfcb2fd4ae3ac5029bd1d592753",
      "Id": "376a75932fcf4cc68effe0cb9ba30f06"
    },
    {
      "Start": "60052c7d26de474987f5c28326a29534",
      "End": "9aefcb441a5c44fab3ebaaf82f8ad40e",
      "Id": "a9bba9bb6d8e41f9aa2f0732c28cb4f6"
    },
    {
      "Start": "60052c7d26de474987f5c28326a29534",
      "End": "2ad63bd12fa045ce9dccab0a87d582c7",
      "Id": "5f2ee5936f804337bf36af4a769a49fb"
    },
    {
      "Start": "60052c7d26de474987f5c28326a29534",
      "End": "8e394f2fcdb74e0dadba6c012b1049b2",
      "Id": "cb1be0e549824dbb94cdd4385b2100ed"
    },
    {
      "Start": "48682888dd2a4ec68c77875f53167d68",
      "End": "b6fb83f839614ce78fd34a744032863c",
      "Id": "cdf879de20c64ca0ae4822e55ada7a50"
    },
    {
      "Start": "d635ab72bab144ee9f5303057593535e",
      "End": "3cf785e93c2f405ca3206b2aed65e2ce",
      "Id": "d977e85fe9d54551bcdde3cd75b39209"
    },
    {
      "Start": "9642f8f034ed4edf9c2dc9d0df0a037e",
      "End": "bb32bd2aaf274af5b24260db55cad604",
      "Id": "34f8353885814f779f9da1522ffdd809"
    },
    {
      "Start": "1fb9affd9d8d4ed2831592b5f0122564",
      "End": "766e41171bdf4235a27fa348b9cca881",
      "Id": "8b8501736e24430c9d5d51d4c03834ff"
    },
    {
      "Start": "6637f9c14070404ca925ecbe9aefd415",
      "End": "1066cecf1f154d6dafd27e33ed809469",
      "Id": "12583613fe4c465397bdffc36d74f6ca"
    },
    {
      "Start": "6c81456e7d314ed294c35c9f2712adc0",
      "End": "258aada022ad43619c884c9c2d64311f",
      "Id": "381d26e6f24b44c1ab80c0db46d28658"
    },
    {
      "Start": "75f914fa096247f996a3dded13f2aead",
      "End": "c0b269139e2348ff9b379d559bdb4029",
      "Id": "966adf89a98e4089a83104e66c9a70c9"
    },
    {
      "Start": "3006e7caac5d482da4d803e7de14e4c7",
      "End": "f768d46af646406eb9f8b4cc77c96806",
      "Id": "5b2cf0274afb4db190f9f43d77eeb3fa"
    },
    {
      "Start": "743c495203c443f891276ead5f608d04",
      "End": "9f95511ed06e4aff92884e0b82904375",
      "Id": "d24500c2ccd648b78fa35f6cb3e2aefa"
    },
    {
      "Start": "ad7cfbf984af4df4bc622432cb1d5517",
      "End": "2e155a3748f84fcab5aa5dd8f0f943f8",
      "Id": "9f7ff03cfac44ba6bce3a4c4457c0125"
    },
    {
      "Start": "90b73253c97b4297ba030890d102d2a9",
      "End": "6f36f4c22ef94e518f0d0ea7643c5552",
      "Id": "8015fbc6551649fdb8c2648d05dd76f1"
    },
    {
      "Start": "b728660353584394bc5d4d17a6a72222",
      "End": "c9e8ca09b8604c96ac69e05d7b43d73a",
      "Id": "37c5aa8141c64b15b65cf3e278b02724"
    },
    {
      "Start": "6ed7c6b91bc9401ca1251b3407fdec7e",
      "End": "cebcdb86329041c79e18fcf9f88be56c",
      "Id": "3df6c5f2e2344ac3b6227349333cd8da"
    },
    {
      "Start": "84ff4bd46b874ad8a0a181300aed8438",
      "End": "c673ab9e5ff9476eb15e54e7238db066",
      "Id": "21c0ab1b564f4a128cfa4a94a1297be7"
    },
    {
      "Start": "84ff4bd46b874ad8a0a181300aed8438",
      "End": "f815593e16cc4cb99ff2faf154c3df04",
      "Id": "7015a9ba0ab945eb9d32b3bebe35f331"
    },
    {
      "Start": "65ea425bf32e47f1859df3c1043d8690",
      "End": "ed568723ae8a40aa91e25e93e172d595",
      "Id": "b66d392e794249e28993f8c438af3219"
    },
    {
      "Start": "d05729888f5742c4b054ab9881a29537",
      "End": "4de4c72d0e674b739d564706464e97ee",
      "Id": "15a1a71634614910a6ecdfec38fa5111"
    },
    {
      "Start": "02ac78e0ba3d4e599d386065ed219b01",
      "End": "67cabadd6187442c97b0c4914db27503",
      "Id": "6d3592a40e264d00919073bb5ec71bca"
    },
    {
      "Start": "c652ab8935854147850af9f24ad561bc",
      "End": "c2dae91fa2274780835cff5450ddfed7",
      "Id": "9dab20343a36432c889710b552bfca50"
    },
    {
      "Start": "bb619f5a634e4fe18fa49f62ec4c3e89",
      "End": "a236d7d31f334dc3be109227977d8390",
      "Id": "539af86ac6bd4de5ba4146cbe94437e2"
    },
    {
      "Start": "bb619f5a634e4fe18fa49f62ec4c3e89",
      "End": "7de0d10895824130b0743bceebb8f462",
      "Id": "bfe5a81ee35d46509aa3f0a0d719a308"
    },
    {
      "Start": "bb619f5a634e4fe18fa49f62ec4c3e89",
      "End": "0275d1b6eb284241ae019c0cb3788e8e",
      "Id": "80a7a26421034233a68f26524d1e85f2"
    },
    {
      "Start": "bb619f5a634e4fe18fa49f62ec4c3e89",
      "End": "07a855c85b6e41cfbc407d7b6eab6b14",
      "Id": "7f78a71ceb3c4a2d82036098257fb299"
    },
    {
      "Start": "bb619f5a634e4fe18fa49f62ec4c3e89",
      "End": "ecb2e083745c47c2a8476e10c9a893c9",
      "Id": "224790d98e894478a2e36f85c8f43892"
    },
    {
      "Start": "608960b76e0b4b8ba54c3de36ae23bbe",
      "End": "500caf9010e1448699dd68cd567e4cbf",
      "Id": "75faa16fd7d349cdbc81ddb508788dda"
    }
  ],
  "Dependencies": [
    "21f76aa4-5026-47ec-b977-474280c81d74",
    "9fbd05c0-ec1f-4bd3-bf37-969a1552eab8",
    "aef287f9-369d-4d31-92af-a18f6962a3d3",
    "928e40a7-91ac-45c3-8d59-4d899fc49b83",
    "b409775c-5d88-4d47-96a3-5135c775d26a"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "WombatDynamo",
      "Version": "2.3.0",
      "ReferenceType": "Package",
      "Nodes": [
        "7fb174cdddf7404ba43f6d88d73f0963",
        "a811cbc79b274ddd9e70a28f1b6e718c"
      ]
    },
    {
      "Name": "archi-lab.net",
      "Version": "2021.25.2521",
      "ReferenceType": "Package",
      "Nodes": [
        "e549f15a305b4c6690ae78e9b73eaa80"
      ]
    },
    {
      "Name": "Orchid",
      "Version": "260.1.0.7729",
      "ReferenceType": "Package",
      "Nodes": [
        "d17232fbc3b440e38de9303c4e25e7d7",
        "2def9dbdb82947549a0a6d3734e09b42"
      ]
    },
    {
      "Name": "Data-Shapes",
      "Version": "2021.2.92",
      "ReferenceType": "Package",
      "Nodes": [
        "d36ee9b6d77948c982139e648ebcee53",
        "cad2c4d43fad4bc8a22a820455ef7e18",
        "5d8d4e4d7fdd4bab8d220b859054c16d",
        "c3b61735be3a48f09f3c8ffd64d32c2a",
        "d89757d46e214fc8bc5936265806d382"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    }
  ],
  "Author": "None provided",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [
    {
      "NodeId": "c1d46f2e-9b0b-4597-8dec-81fa4c53c9e5",
      "Binding": {
        "ByGeometry_InClassDecl-1_InFunctionScope-1_Instance1_c1d46f2e-9b0b-4597-8dec-81fa4c53c9e5": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.0.5650",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 86432.484375,
      "EyeY": 79309.578125,
      "EyeZ": -78941.078125,
      "LookX": -68000.4296875,
      "LookY": -63272.078125,
      "LookZ": 65234.09375,
      "UpX": -0.26447898149490356,
      "UpY": 0.93041777610778809,
      "UpZ": 0.25372007489204407
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Room.Area",
        "Id": "a901754cbc4b4355bce0349a13b4662d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 588.89371932777988,
        "Y": 593.84828908215763
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b3b7e8deb5ed434fa3e14ed8f6eeb106",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 798.95797958560854,
        "Y": 595.60793583171176
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "717bde2cc6774f56a396cd245da5927b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1065.5908328874079,
        "Y": 545.86016050558874
      },
      {
        "ShowGeometry": true,
        "Name": "DirectShape.ByGeometry",
        "Id": "c1d46f2e9b0b45978dec81fa4c53c9e5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6340.3981346227483,
        "Y": 520.10057009714455
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "1145cea1d017411aa3f616d10017870a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3785.0525610769714,
        "Y": 696.6691967541409
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "572fb78a12004facb075d13c9bf132ea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3785.1790686880945,
        "Y": 819.44973060252551
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e46e9b0612a346e29299f0612ab7bded",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3609.4503369935742,
        "Y": 755.36234154071326
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "426765c3421344ada78c75c69d1e9d16",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4119.622230820547,
        "Y": 755.36558341327384
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6b3858ef8b274d8fa7fd01b7440d94d5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5974.39065348453,
        "Y": 550.33753752669554
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "119ea45ccd9245a481cad1be0a6f6d0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6653.907437286638,
        "Y": 518.04429662846337
      },
      {
        "ShowGeometry": true,
        "Name": "Workset.ByName",
        "Id": "7fb174cdddf7404ba43f6d88d73f0963",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6189.030486419384,
        "Y": 321.75657131854013
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a5161d04b0c24cbdb3e2a3dc3aa8d2b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6412.9695027076978,
        "Y": 327.04339955395585
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "859496199ebd47779fe254d72c0c755f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2000.9012658001716,
        "Y": 792.3059619941223
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "41b69aa63ab348c38901cf590705684a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -883.91775952024318,
        "Y": 561.47015271699888
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "80aff6199a454506bd7f55c29abe7620",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -502.7299562274959,
        "Y": 633.1209203099653
      },
      {
        "ShowGeometry": true,
        "Name": "String.StartsWith",
        "Id": "1008b52db18848c3bbeb5aad660c268d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -340.43193388329962,
        "Y": 628.045234524987
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "ba07df2c5eda4dbbbcdd4a3be909ce31",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -101.99734225673114,
        "Y": 574.84910366310226
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "c6a03840019641ff83d847d7899fbc1e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6653.9831274125409,
        "Y": 658.62693505883112
      },
      {
        "ShowGeometry": true,
        "Name": "Elements.Delete",
        "Id": "e549f15a305b4c6690ae78e9b73eaa80",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 114.36524607814761,
        "Y": 565.38063876410786
      },
      {
        "ShowGeometry": true,
        "Name": "DataStream.Await",
        "Id": "d17232fbc3b440e38de9303c4e25e7d7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 357.03266452503203,
        "Y": 540.49412920235227
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "f0c0527a4d4e4f87b32ae7e10305c01b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6654.3224238721359,
        "Y": 798.40859377579545
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "4494d9c58a02409fa5a2476c9756275f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4888.8514786028591,
        "Y": 579.54756635221042
      },
      {
        "ShowGeometry": true,
        "Name": "String.Split",
        "Id": "012bfc4e60214953bf58d2dfee9fe199",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5046.083673723163,
        "Y": 605.34481348421832
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d562d6764910470eb3460c7dcb09e339",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4929.9165691379458,
        "Y": 668.1544374384282
      },
      {
        "ShowGeometry": true,
        "Name": "List.FirstItem",
        "Id": "e307e06b6fd3494a82113e96b0f30881",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5299.1254258071413,
        "Y": 601.60474939426581
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "08db960b829940ccb36aaaa2a48b4ec7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1604.3232843711999,
        "Y": 1028.9900014110813
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "2b1086873da240b7b0df98e299b49117",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2558.5572260101094,
        "Y": 1053.3341727396014
      },
      {
        "ShowGeometry": true,
        "Name": "File From Path",
        "Id": "e81fb40c7a57449da0525da3e317d090",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2434.3617097440897,
        "Y": 1050.1083151742514
      },
      {
        "ShowGeometry": true,
        "Name": "UI.TextNote Data",
        "Id": "d36ee9b6d77948c982139e648ebcee53",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2489.7801769526691,
        "Y": 1192.5234212987311
      },
      {
        "ShowGeometry": true,
        "Name": "Image.ReadFromFile",
        "Id": "b8194747561449d186a468bc7e612ae6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2310.1661934780791,
        "Y": 1048.4953863915712
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bfc65a700fa649c4b68335e0f6469ad7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2201.6576245010197,
        "Y": 1157.3391422431514
      },
      {
        "ShowGeometry": false,
        "Name": "UI.MultipleInputForm ++",
        "Id": "cad2c4d43fad4bc8a22a820455ef7e18",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2005.4944484799094,
        "Y": 1025.106486243636
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "30ef80830bfd44949e8340b6310b60fc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2734.7081138099998,
        "Y": 1129.7277559230615
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "ccb3428b03934844a2573b676784f8fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2190.5248174944395,
        "Y": 1320.5871956689311
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "bcec0210626f434e9f275bfdae015efe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3037.2843926809655,
        "Y": 1221.3305974551336
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "8153593260f2402f8abe0dc8dc5dbe54",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2792.6177046352673,
        "Y": 1357.8444923799634
      },
      {
        "ShowGeometry": true,
        "Name": "ACG Script Usage",
        "Id": "05a41f1203f14499ae02c03d0b0f2ada",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2773.0832001186454,
        "Y": 810.20980691364366
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e626be89d2944716a2dd4b3226017f26",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3040.1183546098355,
        "Y": 813.64350206750441
      },
      {
        "ShowGeometry": true,
        "Name": "TextBox Data",
        "Id": "5d8d4e4d7fdd4bab8d220b859054c16d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2509.3884394537658,
        "Y": 1341.7896392121679
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "82a4a901c6d64e839189508634e10b2f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1565.5607646171907,
        "Y": 1320.2208881048434
      },
      {
        "ShowGeometry": true,
        "Name": "Workset.SelectAll",
        "Id": "a811cbc79b274ddd9e70a28f1b6e718c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3233.4285500124506,
        "Y": 1804.8379729418473
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "26130c699a70444c9bd3f4608071551f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3090.2890250844093,
        "Y": 1808.8917974122789
      },
      {
        "ShowGeometry": true,
        "Name": "List.IndexOf",
        "Id": "f010e9ccb21049eb852b05e446c5faa1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2818.2587332256808,
        "Y": 1867.0754487034765
      },
      {
        "ShowGeometry": true,
        "Name": "DropDown Data",
        "Id": "c3b61735be3a48f09f3c8ffd64d32c2a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2602.9460193368532,
        "Y": 1707.8055871716481
      },
      {
        "ShowGeometry": false,
        "Name": "Room.CoreBoundary",
        "Id": "5579e3f5737143c483c8ceb74a859da8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3869.3803326185971,
        "Y": 274.75129344699
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4d8d5492e83544c8a5d9fa8eb232e25f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4204.8145356407076,
        "Y": 423.67999161478662
      },
      {
        "ShowGeometry": false,
        "Name": "Curve.ExtrudeAsSolid",
        "Id": "e8a19cf79db14624ba33244e92e494fc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4642.15490256097,
        "Y": 395.43483181946812
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "cd558240966347ca93ab97fa04a200a2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4328.1077631126018,
        "Y": 477.9953538458999
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "cd5029ad654648ca8076d6fc7456924a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4131.5651353955636,
        "Y": 509.08230092139877
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "78b7edda321746ee92a64f010c03ad0d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3991.0430582143204,
        "Y": 361.12599952282153
      },
      {
        "ShowGeometry": false,
        "Name": "List.GetItemAtIndex",
        "Id": "7a96d721174b4e8ea648ff088b2e946d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4112.0476574871318,
        "Y": 308.44762602212808
      },
      {
        "ShowGeometry": false,
        "Name": "PolyCurve.ByJoinedCurves",
        "Id": "fa2a8d747a264acebd6ac9075743ac5c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4329.5262762369548,
        "Y": 343.29900562212617
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6827fcba29ee4dbda300067e41fe8045",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3690.3993434369554,
        "Y": 2065.7823119282048
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Type",
        "Id": "348505e691494ef988a9f4173262a9ea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3135.2271070633251,
        "Y": 2063.391522750705
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e81ef56de38749b687e089d31278e703",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2907.2825597292854,
        "Y": 2067.531435874585
      },
      {
        "ShowGeometry": true,
        "Name": "DropDown Data",
        "Id": "d89757d46e214fc8bc5936265806d382",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2608.0845979461624,
        "Y": 2037.152011365607
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "00d010aa25654ca1b51ece58017ac28c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1447.7762311531644,
        "Y": 606.6120934027814
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "2e4a6684375c41a8999d2d18d349b49d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1297.9409408651882,
        "Y": 639.87800341869968
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3bbeeb7497944478812fad7e26a4372a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1737.5391906852192,
        "Y": 611.56863175773753
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "8b9b2244cd9e4a5296b1ee3403006bed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1977.6763436532633,
        "Y": 548.49298393223387
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "bbce14bd26f942cc873f54597ef9f9cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6663.5950680909173,
        "Y": 957.08114301712033
      },
      {
        "ShowGeometry": true,
        "Name": "Element.PhaseByName",
        "Id": "2def9dbdb82947549a0a6d3734e09b42",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6434.4915262679442,
        "Y": 1009.6415638208896
      }
    ],
    "Annotations": [
      {
        "Id": "9541d9e3b9d14f068b0de67887da2737",
        "Title": "Control",
        "Nodes": [
          "a901754cbc4b4355bce0349a13b4662d",
          "b3b7e8deb5ed434fa3e14ed8f6eeb106",
          "717bde2cc6774f56a396cd245da5927b",
          "d17232fbc3b440e38de9303c4e25e7d7",
          "8e310c3db3d94cd887723e6766844ad7"
        ],
        "Left": 347.03266452503203,
        "Top": 482.36842507441975,
        "Width": 899.55816836237591,
        "Height": 216.239510757292,
        "FontSize": 24.0,
        "InitialTop": 521.36842507441975,
        "InitialHeight": 219.239510757292,
        "TextblockHeight": 29.0,
        "Background": "#FF98FB98"
      },
      {
        "Id": "8b10e895f7a94bd892b175176eaf924f",
        "Title": "Processing",
        "Nodes": [
          "1145cea1d017411aa3f616d10017870a",
          "572fb78a12004facb075d13c9bf132ea",
          "e46e9b0612a346e29299f0612ab7bded",
          "426765c3421344ada78c75c69d1e9d16"
        ],
        "Left": 3599.4503369935742,
        "Top": 657.6691967541409,
        "Width": 823.17189382697279,
        "Height": 280.78053384838461,
        "FontSize": 24.0,
        "InitialTop": 696.6691967541409,
        "InitialHeight": 267.78053384838461,
        "TextblockHeight": 29.0,
        "Background": "#FFFFA500"
      },
      {
        "Id": "3e46d78fec6b4a9d80b9c77d3a94a83e",
        "Title": "Processing",
        "Nodes": [
          "7fb174cdddf7404ba43f6d88d73f0963",
          "a5161d04b0c24cbdb3e2a3dc3aa8d2b8"
        ],
        "Left": 6179.030486419384,
        "Top": 282.75657131854013,
        "Width": 445.93901628831372,
        "Height": 201.28682823541573,
        "FontSize": 24.0,
        "InitialTop": 321.75657131854013,
        "InitialHeight": 150.28682823541573,
        "TextblockHeight": 29.0,
        "Background": "#FFFFA500"
      },
      {
        "Id": "a4b36e00aea549b6b918afedda4d5172",
        "Title": "Assing",
        "Nodes": [
          "c1d46f2e9b0b45978dec81fa4c53c9e5",
          "6b3858ef8b274d8fa7fd01b7440d94d5",
          "119ea45ccd9245a481cad1be0a6f6d0a",
          "f0c0527a4d4e4f87b32ae7e10305c01b",
          "c6a03840019641ff83d847d7899fbc1e",
          "bbce14bd26f942cc873f54597ef9f9cd",
          "2def9dbdb82947549a0a6d3734e09b42"
        ],
        "Left": 5964.39065348453,
        "Top": 479.04429662846337,
        "Width": 979.20441460638722,
        "Height": 623.59726719242622,
        "FontSize": 24.0,
        "InitialTop": 518.04429662846337,
        "InitialHeight": 636.59726719242622,
        "TextblockHeight": 29.0,
        "Background": "#FFEE82EE"
      },
      {
        "Id": "70a9cfd7444c4f2bb2525944c5df5dcc",
        "Title": "Input",
        "Nodes": [
          "859496199ebd47779fe254d72c0c755f"
        ],
        "Left": -2010.9012658001716,
        "Top": 753.3059619941223,
        "Width": 376.0,
        "Height": 160.0,
        "FontSize": 24.0,
        "InitialTop": 792.3059619941223,
        "InitialHeight": 145.0,
        "TextblockHeight": 29.0,
        "Background": "#FFD3D3D3"
      },
      {
        "Id": "8e96bbc7903047faa4ca7b7aebdc6537",
        "Title": "Filtering",
        "Nodes": [
          "41b69aa63ab348c38901cf590705684a",
          "80aff6199a454506bd7f55c29abe7620",
          "1008b52db18848c3bbeb5aad660c268d",
          "ba07df2c5eda4dbbbcdd4a3be909ce31",
          "fa51156cafa941128515e9354f6b5ead",
          "27b775aea97c4e8288b657ae5ff8ff7e"
        ],
        "Left": -893.91775952024318,
        "Top": 492.89329902054897,
        "Width": 972.920417263512,
        "Height": 280.15193550443803,
        "FontSize": 24.0,
        "InitialTop": 531.893299020549,
        "InitialHeight": 246.22762128941633,
        "TextblockHeight": 29.0,
        "Background": "#FF87CEFA"
      },
      {
        "Id": "2bf4cba0991f40869e7868ed131cdc32",
        "Title": "Visualisation",
        "Nodes": [
          "e549f15a305b4c6690ae78e9b73eaa80"
        ],
        "Left": 104.36524607814761,
        "Top": 526.38063876410786,
        "Width": 216.0,
        "Height": 132.0,
        "FontSize": 24.0,
        "InitialTop": 565.38063876410786,
        "InitialHeight": 145.0,
        "TextblockHeight": 29.0,
        "Background": "#FFFF0000"
      },
      {
        "Id": "0d051ae0b97d42a2b712c7a9a7fd88b1",
        "Title": "Processing",
        "Nodes": [
          "4494d9c58a02409fa5a2476c9756275f",
          "012bfc4e60214953bf58d2dfee9fe199",
          "d562d6764910470eb3460c7dcb09e339",
          "e307e06b6fd3494a82113e96b0f30881",
          "b12d972eef234d2e80818c1f807710fc"
        ],
        "Left": 4878.8514786028591,
        "Top": 514.1614646061978,
        "Width": 593.27394720428219,
        "Height": 246.99297283223041,
        "FontSize": 24.0,
        "InitialTop": 553.1614646061978,
        "InitialHeight": 259.99297283223041,
        "TextblockHeight": 29.0,
        "Background": "#FFFFA500"
      },
      {
        "Id": "04ab0873c2db4eb99535e4ae18fab3ef",
        "Title": "Input",
        "Nodes": [
          "8153593260f2402f8abe0dc8dc5dbe54",
          "ccb3428b03934844a2573b676784f8fe",
          "2b1086873da240b7b0df98e299b49117",
          "e81fb40c7a57449da0525da3e317d090",
          "d36ee9b6d77948c982139e648ebcee53",
          "b8194747561449d186a468bc7e612ae6",
          "bfc65a700fa649c4b68335e0f6469ad7",
          "cad2c4d43fad4bc8a22a820455ef7e18",
          "30ef80830bfd44949e8340b6310b60fc",
          "bcec0210626f434e9f275bfdae015efe",
          "be8d21d4d74c43b2b4d0cbf1705d3ab6",
          "ced88984218a4477aa6b8098497af120"
        ],
        "Left": -3047.2843926809655,
        "Top": 930.46629160189559,
        "Width": 1411.7899442010562,
        "Height": 716.864305853238,
        "FontSize": 24.0,
        "InitialTop": 969.46629160189559,
        "InitialHeight": 533.37820077806782,
        "TextblockHeight": 29.0,
        "Background": "#FFD9D9D9"
      },
      {
        "Id": "ca038781f45241b4b1fcd2289da2b8fe",
        "Title": "Usage",
        "Nodes": [
          "05a41f1203f14499ae02c03d0b0f2ada",
          "e626be89d2944716a2dd4b3226017f26"
        ],
        "Left": -3050.1183546098355,
        "Top": 771.20980691364366,
        "Width": 503.03515449119004,
        "Height": 135.43369515386075,
        "FontSize": 24.0,
        "InitialTop": 810.20980691364366,
        "InitialHeight": 148.43369515386075,
        "TextblockHeight": 29.0,
        "Background": "#FFFFFF00"
      },
      {
        "Id": "c1dd031748754ac2913f09e74606cc22",
        "Title": "Input",
        "Nodes": [
          "f010e9ccb21049eb852b05e446c5faa1",
          "c3b61735be3a48f09f3c8ffd64d32c2a",
          "26130c699a70444c9bd3f4608071551f",
          "a811cbc79b274ddd9e70a28f1b6e718c"
        ],
        "Left": -3243.4285500124506,
        "Top": 1668.8055871716481,
        "Width": 974.48253067559745,
        "Height": 317.26986153182838,
        "FontSize": 24.0,
        "InitialTop": 1707.8055871716481,
        "InitialHeight": 304.26986153182838,
        "TextblockHeight": 29.0,
        "Background": "#FFD3D3D3"
      },
      {
        "Id": "8f9620b2402c40239a6e0a8a2dd042fd",
        "Title": "Processing",
        "Nodes": [
          "5579e3f5737143c483c8ceb74a859da8",
          "4d8d5492e83544c8a5d9fa8eb232e25f",
          "e8a19cf79db14624ba33244e92e494fc",
          "cd558240966347ca93ab97fa04a200a2",
          "cd5029ad654648ca8076d6fc7456924a",
          "78b7edda321746ee92a64f010c03ad0d",
          "7a96d721174b4e8ea648ff088b2e946d",
          "fa2a8d747a264acebd6ac9075743ac5c",
          "130f5ea53d104271959945adfb8284e6"
        ],
        "Left": 3859.3803326185971,
        "Top": 235.75129344699002,
        "Width": 989.77456994237309,
        "Height": 366.33100747440875,
        "FontSize": 24.0,
        "InitialTop": 274.75129344699,
        "InitialHeight": 379.33100747440875,
        "TextblockHeight": 29.0,
        "Background": "#FFFFA500"
      },
      {
        "Id": "600982ebd7204efd8eb43ce368ce07f7",
        "Title": "Input",
        "Nodes": [
          "6827fcba29ee4dbda300067e41fe8045",
          "348505e691494ef988a9f4173262a9ea",
          "e81ef56de38749b687e089d31278e703",
          "d89757d46e214fc8bc5936265806d382"
        ],
        "Left": -3700.3993434369554,
        "Top": 1998.152011365607,
        "Width": 1426.314745490793,
        "Height": 236.0,
        "FontSize": 24.0,
        "InitialTop": 2037.152011365607,
        "InitialHeight": 175.379424508978,
        "TextblockHeight": 29.0,
        "Background": "#FFD3D3D3"
      },
      {
        "Id": "41cc8ee6a1d54530b34023e6ce3664fc",
        "Title": "Control",
        "Nodes": [
          "00d010aa25654ca1b51ece58017ac28c",
          "2e4a6684375c41a8999d2d18d349b49d",
          "3bbeeb7497944478812fad7e26a4372a",
          "8b9b2244cd9e4a5296b1ee3403006bed",
          "3bb566ce8ff044f5a897cb10f018dcd1"
        ],
        "Left": 1287.9409408651882,
        "Top": 503.3534248715265,
        "Width": 870.73540278807513,
        "Height": 229.52457854717318,
        "FontSize": 24.0,
        "InitialTop": 542.3534248715265,
        "InitialHeight": 242.52457854717318,
        "TextblockHeight": 29.0,
        "Background": "#FF98FB98"
      },
      {
        "Id": "8e310c3db3d94cd887723e6766844ad7",
        "Title": "filer rooms with valid area",
        "Nodes": [],
        "Left": 824.87369843009481,
        "Top": 521.36842507441975,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "fa51156cafa941128515e9354f6b5ead",
        "Title": "collect all room masses existing in the model",
        "Nodes": [],
        "Left": -429.451210992858,
        "Top": 560.40239683987681,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "27b775aea97c4e8288b657ae5ff8ff7e",
        "Title": "mass elements [IN]",
        "Nodes": [],
        "Left": -83.909549618923393,
        "Top": 531.893299020549,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "b12d972eef234d2e80818c1f807710fc",
        "Title": "convert id to string",
        "Nodes": [],
        "Left": 5107.8224619874218,
        "Top": 553.1614646061978,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ced88984218a4477aa6b8098497af120",
        "Title": "Custom Node: Data-Shapes v.2018.12.1",
        "Nodes": [],
        "Left": -2451.0437673194115,
        "Top": 1144.3653229185975,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "be8d21d4d74c43b2b4d0cbf1705d3ab6",
        "Title": "Custom Node: Data-Shapes v.2018.12.1",
        "Nodes": [],
        "Left": -1958.3160222129613,
        "Top": 969.46629160189559,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "130f5ea53d104271959945adfb8284e6",
        "Title": "get room geometry",
        "Nodes": [],
        "Left": 4674.3764176181849,
        "Top": 329.62474598249912,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3bb566ce8ff044f5a897cb10f018dcd1",
        "Title": "filter rooms from selected phase",
        "Nodes": [],
        "Left": 1611.0987873302117,
        "Top": 542.3534248715265,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 745.11809636310079,
    "Y": 399.84394312865015,
    "Zoom": 0.13956240110493934
  }
}